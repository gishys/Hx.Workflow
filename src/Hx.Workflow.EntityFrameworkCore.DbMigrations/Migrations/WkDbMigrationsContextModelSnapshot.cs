// <auto-generated />
using System;
using Hx.Workflow.EntityFrameworkCore.DbMigrations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Volo.Abp.EntityFrameworkCore;

#nullable disable

namespace Migrations
{
    [DbContext(typeof(WkDbMigrationsContext))]
    partial class WkDbMigrationsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.PostgreSql)
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Hx.Workflow.Domain.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<int>("ApplicationComponentType")
                        .HasPrecision(1)
                        .HasColumnType("integer")
                        .HasColumnName("APPLICATIONCOMPONENTTYPE");

                    b.Property<int>("ApplicationType")
                        .HasPrecision(1)
                        .HasColumnType("integer")
                        .HasColumnName("APPLICATIONTYPE");

                    b.Property<string>("Data")
                        .HasColumnType("text")
                        .HasColumnName("DATA");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("DISPLAYNAME");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("text")
                        .HasColumnName("EXTRAPROPERTIES");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("HXAPPLICATIONFORMS", null, t =>
                        {
                            t.HasComment("流程表单");
                        });
                });

            modelBuilder.Entity("Hx.Workflow.Domain.DefinitionCandidate", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid")
                        .HasColumnName("NODEID");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid")
                        .HasColumnName("CANDIDATEID");

                    b.Property<bool>("DefaultSelection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("DEFAULTSELECTION");

                    b.Property<string>("DisplayUserName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("DISPLAYUSERNAME");

                    b.Property<int>("ExecutorType")
                        .HasColumnType("integer")
                        .HasColumnName("EXECUTORTYPE");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("USERNAME");

                    b.HasKey("NodeId", "CandidateId");

                    b.ToTable("HXDEFINITION_CANDIDATES", null, t =>
                        {
                            t.HasComment("流程模板候选人");
                        });
                });

            modelBuilder.Entity("Hx.Workflow.Domain.ExePointerCandidate", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid")
                        .HasColumnName("NODEID");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid")
                        .HasColumnName("CANDIDATEID");

                    b.Property<bool>("DefaultSelection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("DEFAULTSELECTION");

                    b.Property<string>("DisplayUserName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("DISPLAYUSERNAME");

                    b.Property<int>("ExeOperateType")
                        .HasColumnType("integer")
                        .HasColumnName("EXEOPERATETYPE");

                    b.Property<int>("ExecutorType")
                        .HasColumnType("integer")
                        .HasColumnName("EXECUTORTYPE");

                    b.Property<bool?>("Follow")
                        .HasColumnType("boolean")
                        .HasColumnName("FOLLOW");

                    b.Property<int>("ParentState")
                        .HasColumnType("integer")
                        .HasColumnName("PARENTSTATE");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("USERNAME");

                    b.HasKey("NodeId", "CandidateId");

                    b.ToTable("HXPOINTER_CANDIDATES", null, t =>
                        {
                            t.HasComment("流程模板候选人");
                        });
                });

            modelBuilder.Entity("Hx.Workflow.Domain.Persistence.WkDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasComment("主键");

                    b.Property<string>("BusinessType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("BUSINESSTYPE")
                        .HasComment("业务类型");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("CONCURRENCYSTAMP");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATIONTIME");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("CREATORID");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uuid")
                        .HasColumnName("DELETERID");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DELETIONTIME");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("DESCRIPTION")
                        .HasComment("定义描述");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("EXTRAPROPERTIES");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("GROUPID")
                        .HasComment("属于组");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("ISDELETED");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("ISENABLED");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LASTMODIFICATIONTIME");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("LASTMODIFIERID");

                    b.Property<int?>("LimitTime")
                        .HasColumnType("integer")
                        .HasColumnName("LIMITTIME")
                        .HasComment("限制时间");

                    b.Property<string>("ProcessType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("PROCESSTYPE")
                        .HasComment("流程类型");

                    b.Property<int>("SortNumber")
                        .HasColumnType("integer")
                        .HasColumnName("SORTNUMBER")
                        .HasComment("排序");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("TENANTID")
                        .HasComment("租户Id");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("TITLE")
                        .HasComment("标题");

                    b.Property<int>("Version")
                        .HasPrecision(9)
                        .HasColumnType("integer")
                        .HasColumnName("VERSION")
                        .HasComment("版本号");

                    b.HasKey("Id")
                        .HasName("PK_WKDEFINITION");

                    b.HasIndex("GroupId");

                    b.ToTable("HXWKDEFINITIONS", null, t =>
                        {
                            t.HasComment("工作流定义");
                        });
                });

            modelBuilder.Entity("Hx.Workflow.Domain.Persistence.WkDefinitionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasComment("主键");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(119)
                        .HasColumnType("character varying(119)")
                        .HasColumnName("CODE")
                        .HasComment("路径枚举");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATIONTIME");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("CREATORID");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uuid")
                        .HasColumnName("DELETERID");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DELETIONTIME");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("DESCRIPTION")
                        .HasComment("描述");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("ISDELETED");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LASTMODIFICATIONTIME");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("LASTMODIFIERID");

                    b.Property<double>("Order")
                        .HasColumnType("double precision")
                        .HasColumnName("ORDER")
                        .HasComment("序号");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("PARENT_ID")
                        .HasComment("父Id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("TENANTID")
                        .HasComment("租户Id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("TITLE")
                        .HasComment("标题");

                    b.HasKey("Id")
                        .HasName("PK_WKDEFINITION_GROUP");

                    b.HasIndex("ParentId");

                    b.ToTable("HXWKDEFINITION_GROUPS", null, t =>
                        {
                            t.HasComment("工作流定义");
                        });
                });

            modelBuilder.Entity("Hx.Workflow.Domain.Persistence.WkEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATIONTIME");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("CREATORID");

                    b.Property<string>("Data")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("EVENTDATA");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean")
                        .HasColumnName("ISPROCESSED");

                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("EVENTKEY");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("EVENTNAME");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("TENANTID");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EVENTTIME");

                    b.HasKey("Id");

                    b.ToTable("HXWKEVENTS", null, t =>
                        {
                            t.HasComment("流程事件");
                        });
                });

            modelBuilder.Entity("Hx.Workflow.Domain.Persistence.WkExecutionError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<DateTime>("ErrorTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ERRORTIME");

                    b.Property<string>("Message")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("MESSAGE");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("TENANTID");

                    b.Property<Guid>("WkExecutionPointerId")
                        .HasColumnType("uuid")
                        .HasColumnName("WKEXECUTIONPOINTERID");

                    b.Property<Guid>("WkInstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("WKINSTANCEID");

                    b.HasKey("Id");

                    b.ToTable("HXWKEXECUTIONERRORS", null, t =>
                        {
                            t.HasComment("执行错误");
                        });
                });

            modelBuilder.Entity("Hx.Workflow.Domain.Persistence.WkExecutionPointer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("ACTIVE");

                    b.Property<string>("Children")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("CHILDREN");

                    b.Property<DateTime?>("CommitmentDeadline")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("COMMITMENTDEADLINE");

                    b.Property<string>("ContextItem")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("CONTEXTITEM");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATIONTIME");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("CREATORID");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uuid")
                        .HasColumnName("DELETERID");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DELETIONTIME");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ENDTIME");

                    b.Property<string>("EventData")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("EVENTDATA");

                    b.Property<string>("EventKey")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("EVENTKEY");

                    b.Property<string>("EventName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("EVENTNAME");

                    b.Property<bool>("EventPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("EVENTPUBLISHED");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("ISDELETED");

                    b.Property<bool?>("IsInitMaterials")
                        .HasColumnType("boolean")
                        .HasColumnName("ISINITMATERIALS");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LASTMODIFICATIONTIME");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("LASTMODIFIERID");

                    b.Property<string>("Outcome")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("OUTCOME");

                    b.Property<string>("PersistenceData")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("PERSISTENCEDATA");

                    b.Property<string>("PredecessorId")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("PREDECESSORID");

                    b.Property<string>("Recipient")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("RECIPIENT");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uuid")
                        .HasColumnName("RECIPIENTID");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer")
                        .HasColumnName("RETRYCOUNT");

                    b.Property<string>("Scope")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("SCOPE");

                    b.Property<DateTime?>("SleepUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("SLEEPUNTIL");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("STARTTIME");

                    b.Property<int>("Status")
                        .HasPrecision(2)
                        .HasColumnType("integer")
                        .HasColumnName("STATUS");

                    b.Property<int>("StepId")
                        .HasColumnType("integer")
                        .HasColumnName("STEPID");

                    b.Property<string>("StepName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("STEPNAME");

                    b.Property<string>("Submitter")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("SUBMITTER");

                    b.Property<Guid?>("SubmitterId")
                        .HasColumnType("uuid")
                        .HasColumnName("SUBMITTERID");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("TENANTID");

                    b.Property<Guid>("WkInstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("WKINSTANCEID");

                    b.HasKey("Id");

                    b.HasIndex("WkInstanceId");

                    b.ToTable("HXWKEXECUTIONPOINTER", null, t =>
                        {
                            t.HasComment("执行节点实例");
                        });
                });

            modelBuilder.Entity("Hx.Workflow.Domain.Persistence.WkExtensionAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<string>("AttributeKey")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ATTRIBUTEKEY");

                    b.Property<string>("AttributeValue")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("ATTRIBUTEVALUE");

                    b.Property<Guid>("ExecutionPointerId")
                        .HasColumnType("uuid")
                        .HasColumnName("EXECUTIONPOINTERID");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("TENANTID");

                    b.HasKey("Id");

                    b.HasIndex("ExecutionPointerId");

                    b.ToTable("HXWKEXTENSIONATTRIBUTES", null, t =>
                        {
                            t.HasComment("执行节点属性");
                        });
                });

            modelBuilder.Entity("Hx.Workflow.Domain.Persistence.WkInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CompleteTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("COMPLETETIME");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("CONCURRENCYSTAMP");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATETIME");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATIONTIME");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("CREATORID");

                    b.Property<string>("Data")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("DATA");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uuid")
                        .HasColumnName("DELETERID");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DELETIONTIME");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("EXTRAPROPERTIES");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("ISDELETED");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LASTMODIFICATIONTIME");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("LASTMODIFIERID");

                    b.Property<long?>("NextExecution")
                        .HasColumnType("bigint")
                        .HasColumnName("NEXTEXECUTION");

                    b.Property<string>("Reference")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("REFERENCE");

                    b.Property<int>("Status")
                        .HasPrecision(1)
                        .HasColumnType("integer")
                        .HasColumnName("STATUS");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("TENANTID");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("VERSION");

                    b.Property<Guid>("WkDifinitionId")
                        .HasColumnType("uuid")
                        .HasColumnName("WKDIFINITIONID");

                    b.HasKey("Id");

                    b.HasIndex("WkDifinitionId");

                    b.ToTable("HXWKINSTANCES", null, t =>
                        {
                            t.HasComment("流程实例");
                        });
                });

            modelBuilder.Entity("Hx.Workflow.Domain.Persistence.WkSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<string>("EventKey")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("EVENTKEY");

                    b.Property<string>("EventName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("EVENTNAME");

                    b.Property<Guid>("ExecutionPointerId")
                        .HasColumnType("uuid")
                        .HasColumnName("EXECUTIONPOINTERID");

                    b.Property<string>("ExternalToken")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("EXTERNALTOKEN");

                    b.Property<DateTime?>("ExternalTokenExpiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EXTERNALTOKENEXPIRY");

                    b.Property<string>("ExternalWorkerId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("EXTERNALWORKERID");

                    b.Property<int>("StepId")
                        .HasColumnType("integer")
                        .HasColumnName("STEPID");

                    b.Property<DateTime>("SubscribeAsOf")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("SUBSCRIBEASOF");

                    b.Property<string>("SubscriptionData")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("SUBSCRIPTIONDATA");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("TENANTID");

                    b.Property<Guid?>("WorkflowId")
                        .HasColumnType("uuid")
                        .HasColumnName("WORKFLOWID");

                    b.HasKey("Id");

                    b.HasIndex("ExecutionPointerId");

                    b.ToTable("HXWKSUBSCRIPTIONS", null, t =>
                        {
                            t.HasComment("发布");
                        });
                });

            modelBuilder.Entity("Hx.Workflow.Domain.StepBodys.WkAuditor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AuditTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("AUDITTIME");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATIONTIME");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("CREATORID");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uuid")
                        .HasColumnName("DELETERID");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DELETIONTIME");

                    b.Property<Guid>("ExecutionPointerId")
                        .HasColumnType("uuid")
                        .HasColumnName("EXECUTIONPOINTERID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("ISDELETED");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LASTMODIFICATIONTIME");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("LASTMODIFIERID");

                    b.Property<string>("Remark")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("REMARK");

                    b.Property<int>("Status")
                        .HasPrecision(1)
                        .HasColumnType("integer")
                        .HasColumnName("STATUS");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("TENANTID");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("USERID");

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("USERNAME");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uuid")
                        .HasColumnName("WORKFLOWID");

                    b.HasKey("Id");

                    b.HasIndex("ExecutionPointerId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("HXWKAUDITORS", null, t =>
                        {
                            t.HasComment("审核");
                        });
                });

            modelBuilder.Entity("Hx.Workflow.Domain.WkConNodeCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<string>("Field")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("FIELD");

                    b.Property<string>("Operator")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OPERATOR");

                    b.Property<string>("Value")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("VALUE");

                    b.Property<Guid>("WkConditionNodeId")
                        .HasColumnType("uuid")
                        .HasColumnName("WKCONDITIONNODEID");

                    b.HasKey("Id");

                    b.HasIndex("WkConditionNodeId");

                    b.ToTable("HXWKCONNODECONDITIONS", null, t =>
                        {
                            t.HasComment("条件集合");
                        });
                });

            modelBuilder.Entity("Hx.Workflow.Domain.WkConditionNode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<string>("Label")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("LABEL");

                    b.Property<string>("NextNodeName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("NEXTNODENAME");

                    b.Property<int>("NodeType")
                        .HasMaxLength(2)
                        .HasColumnType("integer")
                        .HasColumnName("NODETYPE");

                    b.Property<Guid>("WkNodeId")
                        .HasColumnType("uuid")
                        .HasColumnName("WKNODEID");

                    b.HasKey("Id");

                    b.HasIndex("WkNodeId");

                    b.ToTable("HXWKCONDITIONNODES", null, t =>
                        {
                            t.HasComment("节点条件");
                        });
                });

            modelBuilder.Entity("Hx.Workflow.Domain.WkNode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("DISPLAYNAME");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("text")
                        .HasColumnName("EXTRAPROPERTIES");

                    b.Property<int?>("LimitTime")
                        .HasColumnType("integer")
                        .HasColumnName("LIMITTIME");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NAME");

                    b.Property<int>("SortNumber")
                        .HasColumnType("integer")
                        .HasColumnName("SORTNUMBER")
                        .HasComment("排序");

                    b.Property<int>("StepNodeType")
                        .HasPrecision(1)
                        .HasColumnType("integer")
                        .HasColumnName("STEPNODETYPE");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("VERSION");

                    b.Property<Guid?>("WkDefinitionId")
                        .HasColumnType("uuid")
                        .HasColumnName("WKDIFINITIONID");

                    b.Property<Guid?>("WkStepBodyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WkDefinitionId");

                    b.HasIndex("WkStepBodyId");

                    b.ToTable("HXWKNODES", null, t =>
                        {
                            t.HasComment("执行节点");
                        });
                });

            modelBuilder.Entity("Hx.Workflow.Domain.WkNodeCandidate", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid")
                        .HasColumnName("NODEID");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid")
                        .HasColumnName("CANDIDATEID");

                    b.Property<bool>("DefaultSelection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("DEFAULTSELECTION");

                    b.Property<string>("DisplayUserName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("DISPLAYUSERNAME");

                    b.Property<int>("ExecutorType")
                        .HasColumnType("integer")
                        .HasColumnName("EXECUTORTYPE");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("USERNAME");

                    b.HasKey("NodeId", "CandidateId");

                    b.ToTable("HXNODE_CANDIDATES", null, t =>
                        {
                            t.HasComment("流程模板候选人");
                        });
                });

            modelBuilder.Entity("Hx.Workflow.Domain.WkNodePara", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("KEY");

                    b.Property<string>("Value")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("VALUE");

                    b.Property<Guid>("WkNodeId")
                        .HasColumnType("uuid")
                        .HasColumnName("WKNODEID");

                    b.HasKey("Id");

                    b.HasIndex("WkNodeId");

                    b.ToTable("HXWKNODEPARAS", null, t =>
                        {
                            t.HasComment("步骤参数");
                        });
                });

            modelBuilder.Entity("Hx.Workflow.Domain.WkNode_ApplicationForms", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid")
                        .HasColumnName("NODE_ID");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("APPLICATION_ID");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer")
                        .HasColumnName("SEQUENCENUMBER");

                    b.HasKey("NodeId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("HX_NODES_APPLICATION_FORMS", null, t =>
                        {
                            t.HasComment("节点表单关联表");
                        });
                });

            modelBuilder.Entity("Hx.Workflow.Domain.WkStepBody", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AssemblyFullName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("ASSEMBLYFULLNAME");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATIONTIME");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("CREATORID");

                    b.Property<string>("Data")
                        .HasColumnType("text")
                        .HasColumnName("DATA");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uuid")
                        .HasColumnName("DELETERID");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DELETIONTIME");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("DISPLAYNAME");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("text")
                        .HasColumnName("EXTRAPROPERTIES");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("ISDELETED");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LASTMODIFICATIONTIME");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("LASTMODIFIERID");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NAME");

                    b.Property<string>("TypeFullName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("TYPEFULLNAME");

                    b.HasKey("Id");

                    b.ToTable("HXWKSTEPBODYS", null, t =>
                        {
                            t.HasComment("节点实体");
                        });
                });

            modelBuilder.Entity("Hx.Workflow.Domain.WkStepBodyParam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("DISPLAYNAME");

                    b.Property<string>("Key")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("KEY");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NAME");

                    b.Property<int>("StepBodyParaType")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("VALUE");

                    b.Property<Guid>("WkNodeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WkNodeId");

                    b.ToTable("HXWKSTEPBODYPARAMS", null, t =>
                        {
                            t.HasComment("节点参数");
                        });
                });

            modelBuilder.Entity("Hx.Workflow.Domain.ApplicationForm", b =>
                {
                    b.OwnsMany("Hx.Workflow.Domain.WkParam", "Params", b1 =>
                        {
                            b1.Property<Guid>("ApplicationFormId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("DisplayName")
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Value")
                                .HasColumnType("text");

                            b1.Property<string>("WkParamKey")
                                .HasColumnType("text");

                            b1.HasKey("ApplicationFormId", "Id");

                            b1.ToTable("HXAPPLICATIONFORMS");

                            b1.ToJson("Params");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationFormId");
                        });

                    b.Navigation("Params");
                });

            modelBuilder.Entity("Hx.Workflow.Domain.DefinitionCandidate", b =>
                {
                    b.HasOne("Hx.Workflow.Domain.Persistence.WkDefinition", null)
                        .WithMany("WkCandidates")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Pk_WkDef_Candidate");
                });

            modelBuilder.Entity("Hx.Workflow.Domain.ExePointerCandidate", b =>
                {
                    b.HasOne("Hx.Workflow.Domain.Persistence.WkExecutionPointer", null)
                        .WithMany("WkCandidates")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Pk_Pointer_Candidate");
                });

            modelBuilder.Entity("Hx.Workflow.Domain.Persistence.WkDefinition", b =>
                {
                    b.HasOne("Hx.Workflow.Domain.Persistence.WkDefinitionGroup", null)
                        .WithMany("Definitions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("QI_GROUPS_WKDEFINITION_ID");
                });

            modelBuilder.Entity("Hx.Workflow.Domain.Persistence.WkDefinitionGroup", b =>
                {
                    b.HasOne("Hx.Workflow.Domain.Persistence.WkDefinitionGroup", null)
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("QI_GROUPS_PARENT_ID");
                });

            modelBuilder.Entity("Hx.Workflow.Domain.Persistence.WkExecutionPointer", b =>
                {
                    b.HasOne("Hx.Workflow.Domain.Persistence.WkInstance", "WkInstance")
                        .WithMany("ExecutionPointers")
                        .HasForeignKey("WkInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Pk_Instance_Pointer");

                    b.OwnsMany("Hx.Workflow.Domain.Persistence.WkExecutionPointerMaterials", "Materials", b1 =>
                        {
                            b1.Property<Guid>("WkExecutionPointerId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<int>("AttachReceiveType")
                                .HasColumnType("integer");

                            b1.Property<string>("CatalogueName")
                                .HasColumnType("text");

                            b1.Property<bool>("IsRequired")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsStatic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsVerification")
                                .HasColumnType("boolean");

                            b1.Property<string>("Reference")
                                .HasColumnType("text");

                            b1.Property<int>("ReferenceType")
                                .HasColumnType("integer");

                            b1.Property<int>("SequenceNumber")
                                .HasColumnType("integer");

                            b1.Property<bool>("VerificationPassed")
                                .HasColumnType("boolean");

                            b1.HasKey("WkExecutionPointerId", "Id");

                            b1.ToTable("HXWKEXECUTIONPOINTER");

                            b1.ToJson("Materials");

                            b1.WithOwner()
                                .HasForeignKey("WkExecutionPointerId");

                            b1.OwnsMany("Hx.Workflow.Domain.Persistence.WkExecutionPointerMaterials.Children#WkExecutionPointerMaterials", "Children", b2 =>
                                {
                                    b2.Property<Guid>("WkExecutionPointerMaterialsWkExecutionPointerId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("WkExecutionPointerMaterialsId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<int>("AttachReceiveType")
                                        .HasColumnType("integer");

                                    b2.Property<string>("CatalogueName")
                                        .HasColumnType("text");

                                    b2.Property<bool>("IsRequired")
                                        .HasColumnType("boolean");

                                    b2.Property<bool>("IsStatic")
                                        .HasColumnType("boolean");

                                    b2.Property<bool>("IsVerification")
                                        .HasColumnType("boolean");

                                    b2.Property<string>("Reference")
                                        .HasColumnType("text");

                                    b2.Property<int>("ReferenceType")
                                        .HasColumnType("integer");

                                    b2.Property<int>("SequenceNumber")
                                        .HasColumnType("integer");

                                    b2.Property<bool>("VerificationPassed")
                                        .HasColumnType("boolean");

                                    b2.HasKey("WkExecutionPointerMaterialsWkExecutionPointerId", "WkExecutionPointerMaterialsId", "Id");

                                    b2.ToTable("HXWKEXECUTIONPOINTER");

                                    b2.ToJson("Children");

                                    b2.WithOwner()
                                        .HasForeignKey("WkExecutionPointerMaterialsWkExecutionPointerId", "WkExecutionPointerMaterialsId");
                                });

                            b1.Navigation("Children");
                        });

                    b.Navigation("Materials");

                    b.Navigation("WkInstance");
                });

            modelBuilder.Entity("Hx.Workflow.Domain.Persistence.WkExtensionAttribute", b =>
                {
                    b.HasOne("Hx.Workflow.Domain.Persistence.WkExecutionPointer", "WkExecutionPointer")
                        .WithMany("ExtensionAttributes")
                        .HasForeignKey("ExecutionPointerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Pk_Pointer_Attribute");

                    b.Navigation("WkExecutionPointer");
                });

            modelBuilder.Entity("Hx.Workflow.Domain.Persistence.WkInstance", b =>
                {
                    b.HasOne("Hx.Workflow.Domain.Persistence.WkDefinition", "WkDefinition")
                        .WithMany()
                        .HasForeignKey("WkDifinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Pk_Instance_Definition");

                    b.Navigation("WkDefinition");
                });

            modelBuilder.Entity("Hx.Workflow.Domain.Persistence.WkSubscription", b =>
                {
                    b.HasOne("Hx.Workflow.Domain.Persistence.WkExecutionPointer", null)
                        .WithMany("WkSubscriptions")
                        .HasForeignKey("ExecutionPointerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Pk_Pointer_Subscript");
                });

            modelBuilder.Entity("Hx.Workflow.Domain.StepBodys.WkAuditor", b =>
                {
                    b.HasOne("Hx.Workflow.Domain.Persistence.WkExecutionPointer", "ExecutionPointer")
                        .WithMany()
                        .HasForeignKey("ExecutionPointerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Pk_WkAuditor_ExecPointer");

                    b.HasOne("Hx.Workflow.Domain.Persistence.WkInstance", "Workflow")
                        .WithMany("WkAuditors")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Pk_WkAuditor_WkInstance");

                    b.Navigation("ExecutionPointer");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("Hx.Workflow.Domain.WkConNodeCondition", b =>
                {
                    b.HasOne("Hx.Workflow.Domain.WkConditionNode", null)
                        .WithMany("WkConNodeConditions")
                        .HasForeignKey("WkConditionNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Pk_Candition_ConCondition");
                });

            modelBuilder.Entity("Hx.Workflow.Domain.WkConditionNode", b =>
                {
                    b.HasOne("Hx.Workflow.Domain.WkNode", null)
                        .WithMany("NextNodes")
                        .HasForeignKey("WkNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Pk_WkNode_Candition");
                });

            modelBuilder.Entity("Hx.Workflow.Domain.WkNode", b =>
                {
                    b.HasOne("Hx.Workflow.Domain.Persistence.WkDefinition", "WkDefinition")
                        .WithMany("Nodes")
                        .HasForeignKey("WkDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Pk_WkDef_WkNode");

                    b.HasOne("Hx.Workflow.Domain.WkStepBody", "StepBody")
                        .WithMany()
                        .HasForeignKey("WkStepBodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Pk_WkNode_WkStepBody");

                    b.OwnsMany("Hx.Workflow.Domain.WkNodeMaterials", "Materials", b1 =>
                        {
                            b1.Property<Guid>("WkNodeId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<int>("AttachReceiveType")
                                .HasColumnType("integer");

                            b1.Property<string>("CatalogueName")
                                .HasColumnType("text");

                            b1.Property<bool>("IsRequired")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsStatic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsVerification")
                                .HasColumnType("boolean");

                            b1.Property<int>("ReferenceType")
                                .HasColumnType("integer");

                            b1.Property<int>("SequenceNumber")
                                .HasColumnType("integer");

                            b1.Property<bool>("VerificationPassed")
                                .HasColumnType("boolean");

                            b1.HasKey("WkNodeId", "Id");

                            b1.ToTable("HXWKNODES");

                            b1.ToJson("Materials");

                            b1.WithOwner()
                                .HasForeignKey("WkNodeId");

                            b1.OwnsMany("Hx.Workflow.Domain.WkNodeMaterials.Children#WkNodeMaterials", "Children", b2 =>
                                {
                                    b2.Property<Guid>("WkNodeMaterialsWkNodeId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("WkNodeMaterialsId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<int>("AttachReceiveType")
                                        .HasColumnType("integer");

                                    b2.Property<string>("CatalogueName")
                                        .HasColumnType("text");

                                    b2.Property<bool>("IsRequired")
                                        .HasColumnType("boolean");

                                    b2.Property<bool>("IsStatic")
                                        .HasColumnType("boolean");

                                    b2.Property<bool>("IsVerification")
                                        .HasColumnType("boolean");

                                    b2.Property<int>("ReferenceType")
                                        .HasColumnType("integer");

                                    b2.Property<int>("SequenceNumber")
                                        .HasColumnType("integer");

                                    b2.Property<bool>("VerificationPassed")
                                        .HasColumnType("boolean");

                                    b2.HasKey("WkNodeMaterialsWkNodeId", "WkNodeMaterialsId", "Id");

                                    b2.ToTable("HXWKNODES");

                                    b2.ToJson("Children");

                                    b2.WithOwner()
                                        .HasForeignKey("WkNodeMaterialsWkNodeId", "WkNodeMaterialsId");
                                });

                            b1.Navigation("Children");
                        });

                    b.OwnsMany("Hx.Workflow.Domain.WkParam", "Params", b1 =>
                        {
                            b1.Property<Guid>("WkNodeId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("DisplayName")
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Value")
                                .HasColumnType("text");

                            b1.Property<string>("WkParamKey")
                                .HasColumnType("text");

                            b1.HasKey("WkNodeId", "Id");

                            b1.ToTable("HXWKNODES");

                            b1.ToJson("Params");

                            b1.WithOwner()
                                .HasForeignKey("WkNodeId");
                        });

                    b.Navigation("Materials");

                    b.Navigation("Params");

                    b.Navigation("StepBody");

                    b.Navigation("WkDefinition");
                });

            modelBuilder.Entity("Hx.Workflow.Domain.WkNodeCandidate", b =>
                {
                    b.HasOne("Hx.Workflow.Domain.WkNode", null)
                        .WithMany("WkCandidates")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Pk_WkNode_Candidate");
                });

            modelBuilder.Entity("Hx.Workflow.Domain.WkNodePara", b =>
                {
                    b.HasOne("Hx.Workflow.Domain.WkNode", null)
                        .WithMany("OutcomeSteps")
                        .HasForeignKey("WkNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Pk_WkNode_OutcomeSteps");
                });

            modelBuilder.Entity("Hx.Workflow.Domain.WkNode_ApplicationForms", b =>
                {
                    b.HasOne("Hx.Workflow.Domain.ApplicationForm", "ApplicationForm")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("APLLICATION_FKEY");

                    b.HasOne("Hx.Workflow.Domain.WkNode", null)
                        .WithMany("ApplicationForms")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("NODE_FKEY");

                    b.Navigation("ApplicationForm");
                });

            modelBuilder.Entity("Hx.Workflow.Domain.WkStepBodyParam", b =>
                {
                    b.HasOne("Hx.Workflow.Domain.WkStepBody", null)
                        .WithMany("Inputs")
                        .HasForeignKey("WkNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Pk_WkStepBody_WkParam");
                });

            modelBuilder.Entity("Hx.Workflow.Domain.Persistence.WkDefinition", b =>
                {
                    b.Navigation("Nodes");

                    b.Navigation("WkCandidates");
                });

            modelBuilder.Entity("Hx.Workflow.Domain.Persistence.WkDefinitionGroup", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Definitions");
                });

            modelBuilder.Entity("Hx.Workflow.Domain.Persistence.WkExecutionPointer", b =>
                {
                    b.Navigation("ExtensionAttributes");

                    b.Navigation("WkCandidates");

                    b.Navigation("WkSubscriptions");
                });

            modelBuilder.Entity("Hx.Workflow.Domain.Persistence.WkInstance", b =>
                {
                    b.Navigation("ExecutionPointers");

                    b.Navigation("WkAuditors");
                });

            modelBuilder.Entity("Hx.Workflow.Domain.WkConditionNode", b =>
                {
                    b.Navigation("WkConNodeConditions");
                });

            modelBuilder.Entity("Hx.Workflow.Domain.WkNode", b =>
                {
                    b.Navigation("ApplicationForms");

                    b.Navigation("NextNodes");

                    b.Navigation("OutcomeSteps");

                    b.Navigation("WkCandidates");
                });

            modelBuilder.Entity("Hx.Workflow.Domain.WkStepBody", b =>
                {
                    b.Navigation("Inputs");
                });
#pragma warning restore 612, 618
        }
    }
}
